 model CoffeeDispenser
 
 /*
  * The State pattern interface.
  */
 abstract class CoffeeState
  operations
   accept(i:Integer)
   begin
   end
   
   brew()
   begin
   end
   
   reset()
   begin
   end
 end

 class noCoins < CoffeeState
   operations
    accept(i:Integer)
    begin
	   declare dollars:Integer;
           WriteLine('In state:noCoins operation:accept:');
	   self.coffeeDispenser.amount := self.coffeeDispenser.amount + i;
	   dollars := self.coffeeDispenser.amount;
	   
	   if (dollars > 0 and dollars < 100) then
	     self.coffeeDispenser.coffeeState := self.coffeeDispenser.hasCoinsState
	   end;
	   
	   if dollars > 100 then
	     self.coffeeDispenser.coffeeState := self.coffeeDispenser.enoughCoinsState
	   end;
    end

    brew()
    begin 
	  WriteLine('In state:noCoins operation:brew YOU MUST INSERT MONEY BEFORE YOU BREW');
    end

    reset()
    begin
	  WriteLine('In state:noCoins operation:reset');
	  self.coffeeDispenser.amount := 0;
    end
 end

 class hasCoins < CoffeeState
   operations
   accept(i:Integer)
   begin
          declare dollars:Integer;
          WriteLine('In state:hasCoins operation:accept:');
	  self.coffeeDispenser.amount := self.coffeeDispenser.amount + i;
	  dollars := self.coffeeDispenser.amount;
	  
	  if (dollars > 100) then
	     self.coffeeDispenser.coffeeState := self.coffeeDispenser.enoughCoinsState
	  end;
   end
   
   brew()
   begin
     WriteLine('In state:hasCoins operation:brew YOU NEED TO ADD MORE MONEY');
   end
   
   reset()
   begin
         WriteLine('In state:hasCoins operation:reset HERE ARE YOUR COINS');
	 self.coffeeDispenser.amount := 0;
	 self.coffeeDispenser.coffeeState := self.coffeeDispenser.noCoinsState;
   end
 end

 class enoughCoins < CoffeeState
   operations
   accept(i:Integer)
   begin
      WriteLine('In state:enoughCoins operation:accept:');
      self.coffeeDispenser.amount := self.coffeeDispenser.amount + i;
   end
   
   brew()
   begin
     WriteLine('In state:enoughCoins operation:brew HERE IS YOUR COFFEE AND YOUR CHANGE (IF ANY)');
     self.coffeeDispenser.amount := 0;
     self.coffeeDispenser.coffeeState := self.coffeeDispenser.noCoinsState;
   end
   
   reset()
   begin
     WriteLine('In state:enoughCoins operation:reset HERE IS YOUR MONEY (IF ANY)');
     self.coffeeDispenser.amount := 0;
     self.coffeeDispenser.coffeeState := self.coffeeDispenser.noCoinsState;
   end
 end

 /*
  * A simple class for a coffee dispenser.
  */
 class CoffeeDispenser
   attributes
     amount : Integer init : 0
     coffeeState : CoffeeState
     noCoinsState : CoffeeState
     hasCoinsState : CoffeeState
     enoughCoinsState : CoffeeState
     
   operations
     /* create a new coffee dispenser */
     initInstance()
     begin
           self.amount := 0;
	   self.noCoinsState := new noCoins;
	   self.hasCoinsState := new hasCoins;
	   self.enoughCoinsState := new enoughCoins;
	   
           self.coffeeState := self.noCoinsState; -- we start in the noCoins state
     end

     /* A coin is inserted into the dispenser. Valid coins are: 10,20,50,100 and 200. */
     /* We delegate calls to the State pattern interface */
	 
     accept(i:Integer)
     begin
       self.coffeeState.accept(i);
     end
     pre: let validCoins = Set{10,20,50,100,200} in validCoins->includes(i)
     
     brew()
     begin
       self.coffeeState.brew();
     end
     
     reset()
     begin
	   self.coffeeState.reset();
     end
 end
   -- associations
association dispenserState between
 CoffeeState[1]
 CoffeeDispenser[1]
end
